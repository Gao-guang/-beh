// Generated by gencpp from file chat_my2/test.msg
// DO NOT EDIT!


#ifndef CHAT_MY2_MESSAGE_TEST_H
#define CHAT_MY2_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chat_my2
{
template <class ContainerAllocator>
struct test_
{
  typedef test_<ContainerAllocator> Type;

  test_()
    : s()
    , x(0.0)
    , y(0.0)  {
    }
  test_(const ContainerAllocator& _alloc)
    : s(_alloc)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _s_type;
  _s_type s;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::chat_my2::test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chat_my2::test_<ContainerAllocator> const> ConstPtr;

}; // struct test_

typedef ::chat_my2::test_<std::allocator<void> > test;

typedef boost::shared_ptr< ::chat_my2::test > testPtr;
typedef boost::shared_ptr< ::chat_my2::test const> testConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chat_my2::test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chat_my2::test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chat_my2::test_<ContainerAllocator1> & lhs, const ::chat_my2::test_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chat_my2::test_<ContainerAllocator1> & lhs, const ::chat_my2::test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chat_my2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chat_my2::test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chat_my2::test_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chat_my2::test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chat_my2::test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chat_my2::test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chat_my2::test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chat_my2::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "773945f4ca27234189a5ae6671065ad3";
  }

  static const char* value(const ::chat_my2::test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x773945f4ca272341ULL;
  static const uint64_t static_value2 = 0x89a5ae6671065ad3ULL;
};

template<class ContainerAllocator>
struct DataType< ::chat_my2::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chat_my2/test";
  }

  static const char* value(const ::chat_my2::test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chat_my2::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string s\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::chat_my2::test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chat_my2::test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chat_my2::test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chat_my2::test_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.s);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHAT_MY2_MESSAGE_TEST_H
